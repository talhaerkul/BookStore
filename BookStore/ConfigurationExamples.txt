ASP.NET CORE PROGRAM.CS KONFİGÜRASYON ÖRNEKLERİ
==================================================

1. SERVİS KONFİGÜRASYONLARI DETAYLARI
=====================================

1.1 CORS (Cross-Origin Resource Sharing)
----------------------------------------
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

Ne yapar: Frontend uygulamalarının (React, Angular, Vue) farklı portlardan API'nize erişmesini sağlar.
Örnek: Frontend port 3000'de, API port 5026'da çalışıyorsa CORS gerekli.
Güvenlik: Production'da AllowAnyOrigin() yerine specific domain kullanın.

1.2 Entity Framework Core
--------------------------
builder.Services.AddDbContext<BookStoreContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

Ne yapar: Veritabanı bağlantısı ve ORM (Object-Relational Mapping) sağlar.
Gerekli NuGet: Microsoft.EntityFrameworkCore.SqlServer
Connection String: appsettings.json dosyasında tanımlanır.

1.3 Authentication & Authorization
----------------------------------
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options => { /* JWT config */ });

Ne yapar: JWT token ile kullanıcı kimlik doğrulaması.
Kullanım: Login, logout, protected endpoints.
Gerekli NuGet: Microsoft.AspNetCore.Authentication.JwtBearer

1.4 Memory Cache
----------------
builder.Services.AddMemoryCache();
builder.Services.AddResponseCaching();

Ne yapar: Sık kullanılan verileri bellekte tutar, performans artırır.
Örnek: Kitap listesi, kategoriler gibi az değişen veriler.
Kullanım: Controller'da [ResponseCache] attribute ile.

1.5 Logging
-----------
builder.Services.AddLogging(logging =>
{
    logging.AddConsole();
    logging.AddDebug();
});

Ne yapar: Uygulama loglarını konsol ve debug penceresine yazar.
Log Levels: Trace, Debug, Information, Warning, Error, Critical.
Kullanım: ILogger<T> inject ederek kullanılır.

1.6 Health Checks
-----------------
builder.Services.AddHealthChecks();

Ne yapar: Uygulamanın sağlık durumunu kontrol eder.
Endpoint: /health
Kullanım: Monitoring, load balancer'lar için.

1.7 Swagger Konfigürasyonu
--------------------------
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() { 
        Title = "BookStore API", 
        Version = "v1",
        Description = "A simple BookStore API"
    });
});

Ne yapar: API dokümantasyonu ve test arayüzü.
Özellikler: API endpoint'leri, request/response modelleri.
Geliştirme: Sadece development ortamında aktif.

2. MİDDLEWARE PİPELİNE DETAYLARI
================================

2.1 Middleware Sırası (ÖNEMLİ!)
-------------------------------
app.UseHttpsRedirection();  // 1. HTTPS'e yönlendir
app.UseCors("AllowAll");    // 2. CORS kontrolü
app.UseStaticFiles();       // 3. Statik dosyalar
app.UseRouting();           // 4. Route belirleme
app.UseAuthentication();    // 5. Kimlik doğrulama
app.UseAuthorization();     // 6. Yetkilendirme
app.UseResponseCaching();   // 7. Cache kontrolü
app.MapControllers();       // 8. Controller'ları map et

2.2 Environment-Based Konfigürasyon
-----------------------------------
// Development
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
    app.UseDeveloperExceptionPage();
}

// Production
if (app.Environment.IsProduction())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

3. DEPENDENCY INJECTİON TÜRLERİ
===============================

3.1 Service Lifetimes
---------------------
// Singleton: Uygulama boyunca tek instance
builder.Services.AddSingleton<IConfigService, ConfigService>();

// Scoped: HTTP request boyunca tek instance
builder.Services.AddScoped<IBookService, BookService>();

// Transient: Her kullanımda yeni instance
builder.Services.AddTransient<IEmailService, EmailService>();

4. PRATİK ÖRNEKLER
==================

4.1 Entity Framework Kurulumu
-----------------------------
1. NuGet Package Install:
   - Microsoft.EntityFrameworkCore.SqlServer
   - Microsoft.EntityFrameworkCore.Tools

2. appsettings.json'a connection string ekle:
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=BookStoreDb;Trusted_Connection=true;"
  }
}

3. DbContext oluştur:
public class BookStoreContext : DbContext
{
    public BookStoreContext(DbContextOptions<BookStoreContext> options) : base(options) { }
    
    public DbSet<Book> Books { get; set; }
    public DbSet<Author> Authors { get; set; }
}

4.2 JWT Authentication Implementasyonu
--------------------------------------
1. NuGet Package: Microsoft.AspNetCore.Authentication.JwtBearer

2. appsettings.json'a JWT config:
{
  "JwtSettings": {
    "SecretKey": "your-secret-key-here",
    "Issuer": "BookStoreAPI",
    "Audience": "BookStoreClients",
    "ExpirationInMinutes": 60
  }
}

3. Program.cs'de JWT config:
var jwtSettings = builder.Configuration.GetSection("JwtSettings");
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = jwtSettings["Issuer"],
            ValidAudience = jwtSettings["Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings["SecretKey"]))
        };
    });

4.3 Custom Service Oluşturma
----------------------------
1. Interface tanımla:
public interface IBookService
{
    Task<List<Book>> GetAllBooksAsync();
    Task<Book> GetBookByIdAsync(int id);
    Task<Book> CreateBookAsync(Book book);
    Task UpdateBookAsync(Book book);
    Task DeleteBookAsync(int id);
}

2. Service implement et:
public class BookService : IBookService
{
    private readonly BookStoreContext _context;
    
    public BookService(BookStoreContext context)
    {
        _context = context;
    }
    
    public async Task<List<Book>> GetAllBooksAsync()
    {
        return await _context.Books.ToListAsync();
    }
    
    // Diğer metodlar...
}

3. Program.cs'de register et:
builder.Services.AddScoped<IBookService, BookService>();

4.4 CORS Güvenli Konfigürasyonu
-------------------------------
// Development için
builder.Services.AddCors(options =>
{
    options.AddPolicy("Development", policy =>
    {
        policy.WithOrigins("http://localhost:3000", "http://localhost:4200")
              .AllowAnyMethod()
              .AllowAnyHeader()
              .AllowCredentials();
    });
});

// Production için
builder.Services.AddCors(options =>
{
    options.AddPolicy("Production", policy =>
    {
        policy.WithOrigins("https://yourdomain.com")
              .WithMethods("GET", "POST", "PUT", "DELETE")
              .WithHeaders("Content-Type", "Authorization")
              .AllowCredentials();
    });
});

4.5 Caching Stratejileri
------------------------
1. Memory Cache kullanımı:
public class BookService : IBookService
{
    private readonly IMemoryCache _cache;
    private readonly BookStoreContext _context;
    
    public BookService(IMemoryCache cache, BookStoreContext context)
    {
        _cache = cache;
        _context = context;
    }
    
    public async Task<List<Book>> GetAllBooksAsync()
    {
        const string cacheKey = "all_books";
        
        if (_cache.TryGetValue(cacheKey, out List<Book> books))
        {
            return books;
        }
        
        books = await _context.Books.ToListAsync();
        
        var cacheOptions = new MemoryCacheEntryOptions
        {
            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30),
            SlidingExpiration = TimeSpan.FromMinutes(5)
        };
        
        _cache.Set(cacheKey, books, cacheOptions);
        
        return books;
    }
}

2. Response Cache attribute:
[HttpGet]
[ResponseCache(Duration = 300, Location = ResponseCacheLocation.Any)]
public async Task<ActionResult<List<Book>>> GetBooks()
{
    var books = await _bookService.GetAllBooksAsync();
    return Ok(books);
}

5. GÜVENLİK EN İYİ PRATİKLERİ
=============================

5.1 Production Konfigürasyonu
-----------------------------
- CORS: Specific domain'ler kullan
- HTTPS: Zorunlu hale getir
- JWT: Güçlü secret key kullan
- Logging: Sensitive data loglanmasın
- Error Handling: Detaylı error mesajları production'da gösterilmesin

5.2 Performance Optimizasyonu
----------------------------
- Response Caching: Sık kullanılan veriler için
- Memory Cache: Database sorgu sayısını azalt
- Connection Pooling: Entity Framework otomatik yapar
- Async/Await: Tüm I/O operasyonlarda kullan

Bu dosya ASP.NET Core Program.cs konfigürasyon örneklerini içerir.
Son güncelleme: 2024 